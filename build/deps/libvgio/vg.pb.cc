// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vg.proto

#include "vg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Alignment_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasePileup_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EdgePileup_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edit_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Genotype_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Locus_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Mapping_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodePileup_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Snarl_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Subpath_vg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Support_vg_2eproto;
namespace vg {
class GraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Graph> _instance;
} _Graph_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class EdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Edge> _instance;
} _Edge_default_instance_;
class EditDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Edit> _instance;
} _Edit_default_instance_;
class MappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mapping> _instance;
} _Mapping_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class AlignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alignment> _instance;
} _Alignment_default_instance_;
class MultipathAlignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipathAlignment> _instance;
} _MultipathAlignment_default_instance_;
class SubpathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subpath> _instance;
} _Subpath_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Connection> _instance;
} _Connection_default_instance_;
class KmerMatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KmerMatch> _instance;
} _KmerMatch_default_instance_;
class BasePileupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasePileup> _instance;
} _BasePileup_default_instance_;
class NodePileupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodePileup> _instance;
} _NodePileup_default_instance_;
class EdgePileupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgePileup> _instance;
} _EdgePileup_default_instance_;
class PileupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pileup> _instance;
} _Pileup_default_instance_;
class SnarlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Snarl> _instance;
} _Snarl_default_instance_;
class VisitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Visit> _instance;
} _Visit_default_instance_;
class SnarlTraversalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnarlTraversal> _instance;
} _SnarlTraversal_default_instance_;
class LocusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Locus> _instance;
} _Locus_default_instance_;
class GenotypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Genotype> _instance;
} _Genotype_default_instance_;
class SupportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Support> _instance;
} _Support_default_instance_;
class LocationSupportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationSupport> _instance;
  const ::vg::Edge* edge_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_id_;
} _LocationSupport_default_instance_;
class TranslationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Translation> _instance;
} _Translation_default_instance_;
}  // namespace vg
static void InitDefaultsscc_info_Alignment_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Alignment_default_instance_;
    new (ptr) ::vg::Alignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Alignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Alignment_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Alignment_vg_2eproto}, {
      &scc_info_Path_vg_2eproto.base,
      &scc_info_Locus_vg_2eproto.base,
      &scc_info_Position_vg_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_BasePileup_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_BasePileup_default_instance_;
    new (ptr) ::vg::BasePileup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::BasePileup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasePileup_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasePileup_vg_2eproto}, {}};

static void InitDefaultsscc_info_Connection_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Connection_default_instance_;
    new (ptr) ::vg::Connection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Connection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Connection_vg_2eproto}, {}};

static void InitDefaultsscc_info_Edge_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Edge_default_instance_;
    new (ptr) ::vg::Edge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Edge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Edge_vg_2eproto}, {}};

static void InitDefaultsscc_info_EdgePileup_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_EdgePileup_default_instance_;
    new (ptr) ::vg::EdgePileup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::EdgePileup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EdgePileup_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EdgePileup_vg_2eproto}, {
      &scc_info_Edge_vg_2eproto.base,}};

static void InitDefaultsscc_info_Edit_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Edit_default_instance_;
    new (ptr) ::vg::Edit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Edit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edit_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Edit_vg_2eproto}, {}};

static void InitDefaultsscc_info_Genotype_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Genotype_default_instance_;
    new (ptr) ::vg::Genotype();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Genotype::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Genotype_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Genotype_vg_2eproto}, {}};

static void InitDefaultsscc_info_Graph_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Graph_default_instance_;
    new (ptr) ::vg::Graph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Graph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Graph_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Graph_vg_2eproto}, {
      &scc_info_Node_vg_2eproto.base,
      &scc_info_Edge_vg_2eproto.base,
      &scc_info_Path_vg_2eproto.base,}};

static void InitDefaultsscc_info_KmerMatch_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_KmerMatch_default_instance_;
    new (ptr) ::vg::KmerMatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::KmerMatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KmerMatch_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KmerMatch_vg_2eproto}, {}};

static void InitDefaultsscc_info_LocationSupport_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_LocationSupport_default_instance_;
    new (ptr) ::vg::LocationSupport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::LocationSupport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocationSupport_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LocationSupport_vg_2eproto}, {
      &scc_info_Support_vg_2eproto.base,
      &scc_info_Edge_vg_2eproto.base,}};

static void InitDefaultsscc_info_Locus_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Locus_default_instance_;
    new (ptr) ::vg::Locus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Locus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Locus_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Locus_vg_2eproto}, {
      &scc_info_Path_vg_2eproto.base,
      &scc_info_Support_vg_2eproto.base,
      &scc_info_Genotype_vg_2eproto.base,}};

static void InitDefaultsscc_info_Mapping_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Mapping_default_instance_;
    new (ptr) ::vg::Mapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Mapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Mapping_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Mapping_vg_2eproto}, {
      &scc_info_Position_vg_2eproto.base,
      &scc_info_Edit_vg_2eproto.base,}};

static void InitDefaultsscc_info_MultipathAlignment_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_MultipathAlignment_default_instance_;
    new (ptr) ::vg::MultipathAlignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::MultipathAlignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultipathAlignment_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultipathAlignment_vg_2eproto}, {
      &scc_info_Subpath_vg_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Node_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Node_default_instance_;
    new (ptr) ::vg::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Node_vg_2eproto}, {}};

static void InitDefaultsscc_info_NodePileup_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_NodePileup_default_instance_;
    new (ptr) ::vg::NodePileup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::NodePileup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodePileup_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodePileup_vg_2eproto}, {
      &scc_info_BasePileup_vg_2eproto.base,}};

static void InitDefaultsscc_info_Path_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Path_default_instance_;
    new (ptr) ::vg::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Path_vg_2eproto}, {
      &scc_info_Mapping_vg_2eproto.base,}};

static void InitDefaultsscc_info_Pileup_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Pileup_default_instance_;
    new (ptr) ::vg::Pileup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Pileup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pileup_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Pileup_vg_2eproto}, {
      &scc_info_NodePileup_vg_2eproto.base,
      &scc_info_EdgePileup_vg_2eproto.base,}};

static void InitDefaultsscc_info_Position_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Position_default_instance_;
    new (ptr) ::vg::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_vg_2eproto}, {}};

static void InitDefaultsscc_info_Snarl_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Snarl_default_instance_;
    new (ptr) ::vg::Snarl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vg::_Visit_default_instance_;
    new (ptr) ::vg::Visit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Snarl::InitAsDefaultInstance();
  ::vg::Visit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Snarl_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Snarl_vg_2eproto}, {}};

static void InitDefaultsscc_info_SnarlTraversal_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_SnarlTraversal_default_instance_;
    new (ptr) ::vg::SnarlTraversal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::SnarlTraversal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnarlTraversal_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SnarlTraversal_vg_2eproto}, {
      &scc_info_Snarl_vg_2eproto.base,}};

static void InitDefaultsscc_info_Subpath_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Subpath_default_instance_;
    new (ptr) ::vg::Subpath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Subpath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Subpath_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Subpath_vg_2eproto}, {
      &scc_info_Path_vg_2eproto.base,
      &scc_info_Connection_vg_2eproto.base,}};

static void InitDefaultsscc_info_Support_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Support_default_instance_;
    new (ptr) ::vg::Support();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Support::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Support_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Support_vg_2eproto}, {}};

static void InitDefaultsscc_info_Translation_vg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Translation_default_instance_;
    new (ptr) ::vg::Translation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Translation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Translation_vg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Translation_vg_2eproto}, {
      &scc_info_Path_vg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vg_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Graph, node_),
  PROTOBUF_FIELD_OFFSET(::vg::Graph, edge_),
  PROTOBUF_FIELD_OFFSET(::vg::Graph, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Node, sequence_),
  PROTOBUF_FIELD_OFFSET(::vg::Node, name_),
  PROTOBUF_FIELD_OFFSET(::vg::Node, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Edge, from_),
  PROTOBUF_FIELD_OFFSET(::vg::Edge, to_),
  PROTOBUF_FIELD_OFFSET(::vg::Edge, from_start_),
  PROTOBUF_FIELD_OFFSET(::vg::Edge, to_end_),
  PROTOBUF_FIELD_OFFSET(::vg::Edge, overlap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Edit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Edit, from_length_),
  PROTOBUF_FIELD_OFFSET(::vg::Edit, to_length_),
  PROTOBUF_FIELD_OFFSET(::vg::Edit, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Mapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Mapping, position_),
  PROTOBUF_FIELD_OFFSET(::vg::Mapping, edit_),
  PROTOBUF_FIELD_OFFSET(::vg::Mapping, rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Position, node_id_),
  PROTOBUF_FIELD_OFFSET(::vg::Position, offset_),
  PROTOBUF_FIELD_OFFSET(::vg::Position, is_reverse_),
  PROTOBUF_FIELD_OFFSET(::vg::Position, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Path, name_),
  PROTOBUF_FIELD_OFFSET(::vg::Path, mapping_),
  PROTOBUF_FIELD_OFFSET(::vg::Path, is_circular_),
  PROTOBUF_FIELD_OFFSET(::vg::Path, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, sequence_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, path_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, name_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, quality_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, mapping_quality_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, score_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, query_position_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, sample_name_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, read_group_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, fragment_prev_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, fragment_next_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, is_secondary_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, identity_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, fragment_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, locus_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, refpos_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, read_paired_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, read_mapped_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, mate_unmapped_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, read_on_reverse_strand_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, mate_on_reverse_strand_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, soft_clipped_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, discordant_insert_size_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, uniqueness_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, correct_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, secondary_score_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, fragment_score_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, mate_mapped_to_disjoint_subgraph_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, fragment_length_distribution_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, time_used_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, to_correct_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, correctly_mapped_),
  PROTOBUF_FIELD_OFFSET(::vg::Alignment, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, sequence_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, quality_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, name_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, sample_name_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, read_group_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, subpath_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, mapping_quality_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, start_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, paired_read_name_),
  PROTOBUF_FIELD_OFFSET(::vg::MultipathAlignment, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Subpath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Subpath, path_),
  PROTOBUF_FIELD_OFFSET(::vg::Subpath, next_),
  PROTOBUF_FIELD_OFFSET(::vg::Subpath, score_),
  PROTOBUF_FIELD_OFFSET(::vg::Subpath, connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Connection, next_),
  PROTOBUF_FIELD_OFFSET(::vg::Connection, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::KmerMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::KmerMatch, sequence_),
  PROTOBUF_FIELD_OFFSET(::vg::KmerMatch, node_id_),
  PROTOBUF_FIELD_OFFSET(::vg::KmerMatch, position_),
  PROTOBUF_FIELD_OFFSET(::vg::KmerMatch, backward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::BasePileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::BasePileup, ref_base_),
  PROTOBUF_FIELD_OFFSET(::vg::BasePileup, num_bases_),
  PROTOBUF_FIELD_OFFSET(::vg::BasePileup, bases_),
  PROTOBUF_FIELD_OFFSET(::vg::BasePileup, qualities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::NodePileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::NodePileup, node_id_),
  PROTOBUF_FIELD_OFFSET(::vg::NodePileup, base_pileup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::EdgePileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::EdgePileup, edge_),
  PROTOBUF_FIELD_OFFSET(::vg::EdgePileup, num_reads_),
  PROTOBUF_FIELD_OFFSET(::vg::EdgePileup, num_forward_reads_),
  PROTOBUF_FIELD_OFFSET(::vg::EdgePileup, qualities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Pileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Pileup, node_pileups_),
  PROTOBUF_FIELD_OFFSET(::vg::Pileup, edge_pileups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, type_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, start_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, end_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, parent_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, name_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, start_self_reachable_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, end_self_reachable_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, start_end_reachable_),
  PROTOBUF_FIELD_OFFSET(::vg::Snarl, directed_acyclic_net_graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Visit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Visit, node_id_),
  PROTOBUF_FIELD_OFFSET(::vg::Visit, snarl_),
  PROTOBUF_FIELD_OFFSET(::vg::Visit, name_),
  PROTOBUF_FIELD_OFFSET(::vg::Visit, backward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::SnarlTraversal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::SnarlTraversal, visit_),
  PROTOBUF_FIELD_OFFSET(::vg::SnarlTraversal, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Locus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Locus, name_),
  PROTOBUF_FIELD_OFFSET(::vg::Locus, allele_),
  PROTOBUF_FIELD_OFFSET(::vg::Locus, support_),
  PROTOBUF_FIELD_OFFSET(::vg::Locus, genotype_),
  PROTOBUF_FIELD_OFFSET(::vg::Locus, overall_support_),
  PROTOBUF_FIELD_OFFSET(::vg::Locus, allele_log_likelihood_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Genotype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Genotype, allele_),
  PROTOBUF_FIELD_OFFSET(::vg::Genotype, is_phased_),
  PROTOBUF_FIELD_OFFSET(::vg::Genotype, likelihood_),
  PROTOBUF_FIELD_OFFSET(::vg::Genotype, log_likelihood_),
  PROTOBUF_FIELD_OFFSET(::vg::Genotype, log_prior_),
  PROTOBUF_FIELD_OFFSET(::vg::Genotype, log_posterior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Support, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Support, quality_),
  PROTOBUF_FIELD_OFFSET(::vg::Support, forward_),
  PROTOBUF_FIELD_OFFSET(::vg::Support, reverse_),
  PROTOBUF_FIELD_OFFSET(::vg::Support, left_),
  PROTOBUF_FIELD_OFFSET(::vg::Support, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::LocationSupport, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vg::LocationSupport, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::LocationSupport, support_),
  offsetof(::vg::LocationSupportDefaultTypeInternal, edge_),
  offsetof(::vg::LocationSupportDefaultTypeInternal, node_id_),
  PROTOBUF_FIELD_OFFSET(::vg::LocationSupport, oneof_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vg::Translation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vg::Translation, from_),
  PROTOBUF_FIELD_OFFSET(::vg::Translation, to_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vg::Graph)},
  { 8, -1, sizeof(::vg::Node)},
  { 16, -1, sizeof(::vg::Edge)},
  { 26, -1, sizeof(::vg::Edit)},
  { 34, -1, sizeof(::vg::Mapping)},
  { 42, -1, sizeof(::vg::Position)},
  { 51, -1, sizeof(::vg::Path)},
  { 60, -1, sizeof(::vg::Alignment)},
  { 98, -1, sizeof(::vg::MultipathAlignment)},
  { 113, -1, sizeof(::vg::Subpath)},
  { 122, -1, sizeof(::vg::Connection)},
  { 129, -1, sizeof(::vg::KmerMatch)},
  { 138, -1, sizeof(::vg::BasePileup)},
  { 147, -1, sizeof(::vg::NodePileup)},
  { 154, -1, sizeof(::vg::EdgePileup)},
  { 163, -1, sizeof(::vg::Pileup)},
  { 170, -1, sizeof(::vg::Snarl)},
  { 184, -1, sizeof(::vg::Visit)},
  { 193, -1, sizeof(::vg::SnarlTraversal)},
  { 200, -1, sizeof(::vg::Locus)},
  { 211, -1, sizeof(::vg::Genotype)},
  { 222, -1, sizeof(::vg::Support)},
  { 232, -1, sizeof(::vg::LocationSupport)},
  { 241, -1, sizeof(::vg::Translation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Graph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Edit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Mapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Alignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_MultipathAlignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Subpath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_KmerMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_BasePileup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_NodePileup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_EdgePileup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Pileup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Snarl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Visit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_SnarlTraversal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Locus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Genotype_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Support_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_LocationSupport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vg::_Translation_default_instance_),
};

const char descriptor_table_protodef_vg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010vg.proto\022\002vg\032\034google/protobuf/struct.p"
  "roto\"O\n\005Graph\022\026\n\004node\030\001 \003(\0132\010.vg.Node\022\026\n"
  "\004edge\030\002 \003(\0132\010.vg.Edge\022\026\n\004path\030\003 \003(\0132\010.vg"
  ".Path\"2\n\004Node\022\020\n\010sequence\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\022\n\n\002id\030\003 \001(\003\"U\n\004Edge\022\014\n\004from\030\001 \001(\003\022"
  "\n\n\002to\030\002 \001(\003\022\022\n\nfrom_start\030\003 \001(\010\022\016\n\006to_en"
  "d\030\004 \001(\010\022\017\n\007overlap\030\005 \001(\005\"@\n\004Edit\022\023\n\013from"
  "_length\030\001 \001(\005\022\021\n\tto_length\030\002 \001(\005\022\020\n\010sequ"
  "ence\030\003 \001(\t\"O\n\007Mapping\022\036\n\010position\030\001 \001(\0132"
  "\014.vg.Position\022\026\n\004edit\030\002 \003(\0132\010.vg.Edit\022\014\n"
  "\004rank\030\005 \001(\003\"M\n\010Position\022\017\n\007node_id\030\001 \001(\003"
  "\022\016\n\006offset\030\002 \001(\003\022\022\n\nis_reverse\030\004 \001(\010\022\014\n\004"
  "name\030\005 \001(\t\"W\n\004Path\022\014\n\004name\030\001 \001(\t\022\034\n\007mapp"
  "ing\030\002 \003(\0132\013.vg.Mapping\022\023\n\013is_circular\030\003 "
  "\001(\010\022\016\n\006length\030\004 \001(\003\"\352\006\n\tAlignment\022\020\n\010seq"
  "uence\030\001 \001(\t\022\026\n\004path\030\002 \001(\0132\010.vg.Path\022\014\n\004n"
  "ame\030\003 \001(\t\022\017\n\007quality\030\004 \001(\014\022\027\n\017mapping_qu"
  "ality\030\005 \001(\005\022\r\n\005score\030\006 \001(\005\022\026\n\016query_posi"
  "tion\030\007 \001(\005\022\023\n\013sample_name\030\t \001(\t\022\022\n\nread_"
  "group\030\n \001(\t\022$\n\rfragment_prev\030\013 \001(\0132\r.vg."
  "Alignment\022$\n\rfragment_next\030\014 \001(\0132\r.vg.Al"
  "ignment\022\024\n\014is_secondary\030\017 \001(\010\022\020\n\010identit"
  "y\030\020 \001(\001\022\032\n\010fragment\030\021 \003(\0132\010.vg.Path\022\030\n\005l"
  "ocus\030\022 \003(\0132\t.vg.Locus\022\034\n\006refpos\030\023 \003(\0132\014."
  "vg.Position\022\023\n\013read_paired\030\024 \001(\010\022\023\n\013read"
  "_mapped\030\025 \001(\010\022\025\n\rmate_unmapped\030\026 \001(\010\022\036\n\026"
  "read_on_reverse_strand\030\027 \001(\010\022\036\n\026mate_on_"
  "reverse_strand\030\030 \001(\010\022\024\n\014soft_clipped\030\031 \001"
  "(\010\022\036\n\026discordant_insert_size\030\032 \001(\010\022\022\n\nun"
  "iqueness\030\033 \001(\001\022\017\n\007correct\030\034 \001(\001\022\027\n\017secon"
  "dary_score\030\035 \003(\005\022\026\n\016fragment_score\030\036 \001(\001"
  "\022(\n mate_mapped_to_disjoint_subgraph\030\037 \001"
  "(\010\022$\n\034fragment_length_distribution\030  \001(\t"
  "\022\021\n\ttime_used\030# \001(\001\022 \n\nto_correct\030$ \001(\0132"
  "\014.vg.Position\022\030\n\020correctly_mapped\030% \001(\010\022"
  "+\n\nannotation\030d \001(\0132\027.google.protobuf.St"
  "ructJ\004\010\010\020\tJ\004\010!\020#\"\373\001\n\022MultipathAlignment\022"
  "\020\n\010sequence\030\001 \001(\t\022\017\n\007quality\030\002 \001(\014\022\014\n\004na"
  "me\030\003 \001(\t\022\023\n\013sample_name\030\004 \001(\t\022\022\n\nread_gr"
  "oup\030\005 \001(\t\022\034\n\007subpath\030\006 \003(\0132\013.vg.Subpath\022"
  "\027\n\017mapping_quality\030\007 \001(\005\022\r\n\005start\030\010 \003(\r\022"
  "\030\n\020paired_read_name\030\t \001(\t\022+\n\nannotation\030"
  "d \001(\0132\027.google.protobuf.Struct\"b\n\007Subpat"
  "h\022\026\n\004path\030\001 \001(\0132\010.vg.Path\022\014\n\004next\030\002 \003(\r\022"
  "\r\n\005score\030\003 \001(\005\022\"\n\nconnection\030\004 \003(\0132\016.vg."
  "Connection\")\n\nConnection\022\014\n\004next\030\001 \001(\r\022\r"
  "\n\005score\030\002 \001(\005\"R\n\tKmerMatch\022\020\n\010sequence\030\001"
  " \001(\t\022\017\n\007node_id\030\002 \001(\003\022\020\n\010position\030\003 \001(\021\022"
  "\020\n\010backward\030\004 \001(\010\"S\n\nBasePileup\022\020\n\010ref_b"
  "ase\030\001 \001(\005\022\021\n\tnum_bases\030\002 \001(\005\022\r\n\005bases\030\003 "
  "\001(\t\022\021\n\tqualities\030\004 \001(\014\"B\n\nNodePileup\022\017\n\007"
  "node_id\030\001 \001(\003\022#\n\013base_pileup\030\002 \003(\0132\016.vg."
  "BasePileup\"e\n\nEdgePileup\022\026\n\004edge\030\001 \001(\0132\010"
  ".vg.Edge\022\021\n\tnum_reads\030\002 \001(\005\022\031\n\021num_forwa"
  "rd_reads\030\003 \001(\005\022\021\n\tqualities\030\004 \001(\014\"T\n\006Pil"
  "eup\022$\n\014node_pileups\030\001 \003(\0132\016.vg.NodePileu"
  "p\022$\n\014edge_pileups\030\002 \003(\0132\016.vg.EdgePileup\""
  "\372\001\n\005Snarl\022\033\n\004type\030\001 \001(\0162\r.vg.SnarlType\022\030"
  "\n\005start\030\002 \001(\0132\t.vg.Visit\022\026\n\003end\030\003 \001(\0132\t."
  "vg.Visit\022\031\n\006parent\030\004 \001(\0132\t.vg.Snarl\022\014\n\004n"
  "ame\030\005 \001(\t\022\034\n\024start_self_reachable\030\006 \001(\010\022"
  "\032\n\022end_self_reachable\030\007 \001(\010\022\033\n\023start_end"
  "_reachable\030\010 \001(\010\022\"\n\032directed_acyclic_net"
  "_graph\030\t \001(\010\"R\n\005Visit\022\017\n\007node_id\030\001 \001(\003\022\030"
  "\n\005snarl\030\002 \001(\0132\t.vg.Snarl\022\014\n\004name\030\004 \001(\t\022\020"
  "\n\010backward\030\003 \001(\010\"8\n\016SnarlTraversal\022\030\n\005vi"
  "sit\030\001 \003(\0132\t.vg.Visit\022\014\n\004name\030\002 \001(\t\"\262\001\n\005L"
  "ocus\022\014\n\004name\030\001 \001(\t\022\030\n\006allele\030\002 \003(\0132\010.vg."
  "Path\022\034\n\007support\030\003 \003(\0132\013.vg.Support\022\036\n\010ge"
  "notype\030\004 \003(\0132\014.vg.Genotype\022$\n\017overall_su"
  "pport\030\005 \001(\0132\013.vg.Support\022\035\n\025allele_log_l"
  "ikelihood\030\006 \003(\001\"\203\001\n\010Genotype\022\016\n\006allele\030\001"
  " \003(\005\022\021\n\tis_phased\030\002 \001(\010\022\022\n\nlikelihood\030\003 "
  "\001(\001\022\026\n\016log_likelihood\030\004 \001(\001\022\021\n\tlog_prior"
  "\030\005 \001(\001\022\025\n\rlog_posterior\030\006 \001(\001\"Y\n\007Support"
  "\022\017\n\007quality\030\001 \001(\001\022\017\n\007forward\030\002 \001(\001\022\017\n\007re"
  "verse\030\003 \001(\001\022\014\n\004left\030\004 \001(\001\022\r\n\005right\030\005 \001(\001"
  "\"n\n\017LocationSupport\022\034\n\007support\030\001 \001(\0132\013.v"
  "g.Support\022\030\n\004edge\030\002 \001(\0132\010.vg.EdgeH\000\022\021\n\007n"
  "ode_id\030\003 \001(\003H\000B\020\n\016oneof_location\";\n\013Tran"
  "slation\022\026\n\004from\030\001 \001(\0132\010.vg.Path\022\024\n\002to\030\002 "
  "\001(\0132\010.vg.Path*9\n\tSnarlType\022\020\n\014UNCLASSIFI"
  "ED\020\000\022\017\n\013ULTRABUBBLE\020\001\022\t\n\005UNARY\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vg_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vg_2eproto_sccs[23] = {
  &scc_info_Alignment_vg_2eproto.base,
  &scc_info_BasePileup_vg_2eproto.base,
  &scc_info_Connection_vg_2eproto.base,
  &scc_info_Edge_vg_2eproto.base,
  &scc_info_EdgePileup_vg_2eproto.base,
  &scc_info_Edit_vg_2eproto.base,
  &scc_info_Genotype_vg_2eproto.base,
  &scc_info_Graph_vg_2eproto.base,
  &scc_info_KmerMatch_vg_2eproto.base,
  &scc_info_LocationSupport_vg_2eproto.base,
  &scc_info_Locus_vg_2eproto.base,
  &scc_info_Mapping_vg_2eproto.base,
  &scc_info_MultipathAlignment_vg_2eproto.base,
  &scc_info_Node_vg_2eproto.base,
  &scc_info_NodePileup_vg_2eproto.base,
  &scc_info_Path_vg_2eproto.base,
  &scc_info_Pileup_vg_2eproto.base,
  &scc_info_Position_vg_2eproto.base,
  &scc_info_Snarl_vg_2eproto.base,
  &scc_info_SnarlTraversal_vg_2eproto.base,
  &scc_info_Subpath_vg_2eproto.base,
  &scc_info_Support_vg_2eproto.base,
  &scc_info_Translation_vg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vg_2eproto = {
  false, false, descriptor_table_protodef_vg_2eproto, "vg.proto", 3320,
  &descriptor_table_vg_2eproto_once, descriptor_table_vg_2eproto_sccs, descriptor_table_vg_2eproto_deps, 23, 1,
  schemas, file_default_instances, TableStruct_vg_2eproto::offsets,
  file_level_metadata_vg_2eproto, 24, file_level_enum_descriptors_vg_2eproto, file_level_service_descriptors_vg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vg_2eproto)), true);
namespace vg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnarlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vg_2eproto);
  return file_level_enum_descriptors_vg_2eproto[0];
}
bool SnarlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Graph::InitAsDefaultInstance() {
}
class Graph::_Internal {
 public:
};

Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_(arena),
  edge_(arena),
  path_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_),
      edge_(from.edge_),
      path_(from.path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vg.Graph)
}

void Graph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Graph_vg_2eproto.base);
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:vg.Graph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Graph::ArenaDtor(void* object) {
  Graph* _this = reinterpret_cast< Graph* >(object);
  (void)_this;
}
void Graph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Graph& Graph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Graph_vg_2eproto.base);
  return *internal_default_instance();
}


void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  edge_.Clear();
  path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vg.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vg.Edge edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vg.Path path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Graph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  // repeated .vg.Edge edge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edge(i), target, stream);
  }

  // repeated .vg.Path path = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_path(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Graph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vg.Edge edge = 2;
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vg.Path path = 3;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  path_.MergeFrom(from.path_);
}

void Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
  edge_.InternalSwap(&other->edge_);
  path_.InternalSwap(&other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
}
class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence().empty()) {
    sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequence(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:vg.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_vg_2eproto.base);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:vg.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_vg_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Node.sequence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Node.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Node.sequence");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Node.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Edge::InitAsDefaultInstance() {
}
class Edge::_Internal {
 public:
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_) -
    reinterpret_cast<char*>(&from_)) + sizeof(overlap_));
  // @@protoc_insertion_point(copy_constructor:vg.Edge)
}

void Edge::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overlap_) -
      reinterpret_cast<char*>(&from_)) + sizeof(overlap_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:vg.Edge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Edge::ArenaDtor(void* object) {
  Edge* _this = reinterpret_cast< Edge* >(object);
  (void)_this;
}
void Edge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Edge& Edge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Edge_vg_2eproto.base);
  return *internal_default_instance();
}


void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overlap_) -
      reinterpret_cast<char*>(&from_)) + sizeof(overlap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool from_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          from_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool to_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 overlap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Edge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_from(), target);
  }

  // int64 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_to(), target);
  }

  // bool from_start = 3;
  if (this->from_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_start(), target);
  }

  // bool to_end = 4;
  if (this->to_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_to_end(), target);
  }

  // int32 overlap = 5;
  if (this->overlap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_overlap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Edge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from());
  }

  // int64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to());
  }

  // bool from_start = 3;
  if (this->from_start() != 0) {
    total_size += 1 + 1;
  }

  // bool to_end = 4;
  if (this->to_end() != 0) {
    total_size += 1 + 1;
  }

  // int32 overlap = 5;
  if (this->overlap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_overlap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Edge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Edge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.from_start() != 0) {
    _internal_set_from_start(from._internal_from_start());
  }
  if (from.to_end() != 0) {
    _internal_set_to_end(from._internal_to_end());
  }
  if (from.overlap() != 0) {
    _internal_set_overlap(from._internal_overlap());
  }
}

void Edge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, overlap_)
      + sizeof(Edge::overlap_)
      - PROTOBUF_FIELD_OFFSET(Edge, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Edit::InitAsDefaultInstance() {
}
class Edit::_Internal {
 public:
};

Edit::Edit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Edit)
}
Edit::Edit(const Edit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence().empty()) {
    sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequence(),
      GetArena());
  }
  ::memcpy(&from_length_, &from.from_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_length_) -
    reinterpret_cast<char*>(&from_length_)) + sizeof(to_length_));
  // @@protoc_insertion_point(copy_constructor:vg.Edit)
}

void Edit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Edit_vg_2eproto.base);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_length_) -
      reinterpret_cast<char*>(&from_length_)) + sizeof(to_length_));
}

Edit::~Edit() {
  // @@protoc_insertion_point(destructor:vg.Edit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Edit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Edit::ArenaDtor(void* object) {
  Edit* _this = reinterpret_cast< Edit* >(object);
  (void)_this;
}
void Edit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Edit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Edit& Edit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Edit_vg_2eproto.base);
  return *internal_default_instance();
}


void Edit::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Edit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&from_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_length_) -
      reinterpret_cast<char*>(&from_length_)) + sizeof(to_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Edit.sequence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Edit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_length = 1;
  if (this->from_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_length(), target);
  }

  // int32 to_length = 2;
  if (this->to_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to_length(), target);
  }

  // string sequence = 3;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Edit.sequence");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Edit)
  return target;
}

size_t Edit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Edit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence = 3;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  // int32 from_length = 1;
  if (this->from_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_length());
  }

  // int32 to_length = 2;
  if (this->to_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Edit)
  GOOGLE_DCHECK_NE(&from, this);
  const Edit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Edit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Edit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Edit)
    MergeFrom(*source);
  }
}

void Edit::MergeFrom(const Edit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Edit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.from_length() != 0) {
    _internal_set_from_length(from._internal_from_length());
  }
  if (from.to_length() != 0) {
    _internal_set_to_length(from._internal_to_length());
  }
}

void Edit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Edit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edit::CopyFrom(const Edit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Edit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edit::IsInitialized() const {
  return true;
}

void Edit::InternalSwap(Edit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edit, to_length_)
      + sizeof(Edit::to_length_)
      - PROTOBUF_FIELD_OFFSET(Edit, from_length_)>(
          reinterpret_cast<char*>(&from_length_),
          reinterpret_cast<char*>(&other->from_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mapping::InitAsDefaultInstance() {
  ::vg::_Mapping_default_instance_._instance.get_mutable()->position_ = const_cast< ::vg::Position*>(
      ::vg::Position::internal_default_instance());
}
class Mapping::_Internal {
 public:
  static const ::vg::Position& position(const Mapping* msg);
};

const ::vg::Position&
Mapping::_Internal::position(const Mapping* msg) {
  return *msg->position_;
}
Mapping::Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Mapping)
}
Mapping::Mapping(const Mapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edit_(from.edit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vg::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:vg.Mapping)
}

void Mapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mapping_vg_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rank_));
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:vg.Mapping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mapping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void Mapping::ArenaDtor(void* object) {
  Mapping* _this = reinterpret_cast< Mapping* >(object);
  (void)_this;
}
void Mapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mapping& Mapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mapping_vg_2eproto.base);
  return *internal_default_instance();
}


void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Mapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edit_.Clear();
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  rank_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vg.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vg.Edit edit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Mapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Position position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // repeated .vg.Edit edit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edit(i), target, stream);
  }

  // int64 rank = 5;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Mapping)
  return target;
}

size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Mapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.Edit edit = 2;
  total_size += 1UL * this->_internal_edit_size();
  for (const auto& msg : this->edit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vg.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Mapping)
  GOOGLE_DCHECK_NE(&from, this);
  const Mapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Mapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Mapping)
    MergeFrom(*source);
  }
}

void Mapping::MergeFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Mapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edit_.MergeFrom(from.edit_);
  if (from.has_position()) {
    _internal_mutable_position()->::vg::Position::MergeFrom(from._internal_position());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void Mapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  return true;
}

void Mapping::InternalSwap(Mapping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edit_.InternalSwap(&other->edit_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mapping, rank_)
      + sizeof(Mapping::rank_)
      - PROTOBUF_FIELD_OFFSET(Mapping, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_reverse_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(is_reverse_));
  // @@protoc_insertion_point(copy_constructor:vg.Position)
}

void Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Position_vg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reverse_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(is_reverse_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:vg.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_vg_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reverse_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(is_reverse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_reverse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Position.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_reverse(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Position.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.is_reverse() != 0) {
    _internal_set_is_reverse(from._internal_is_reverse());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, is_reverse_)
      + sizeof(Position::is_reverse_)
      - PROTOBUF_FIELD_OFFSET(Position, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mapping_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mapping_(from.mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_circular_) -
    reinterpret_cast<char*>(&length_)) + sizeof(is_circular_));
  // @@protoc_insertion_point(copy_constructor:vg.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_vg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_circular_) -
      reinterpret_cast<char*>(&length_)) + sizeof(is_circular_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:vg.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_vg_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapping_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_circular_) -
      reinterpret_cast<char*>(&length_)) + sizeof(is_circular_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Path.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vg.Mapping mapping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_circular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_circular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Path.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .vg.Mapping mapping = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mapping(i), target, stream);
  }

  // bool is_circular = 3;
  if (this->is_circular() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_circular(), target);
  }

  // int64 length = 4;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.Mapping mapping = 2;
  total_size += 1UL * this->_internal_mapping_size();
  for (const auto& msg : this->mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_length());
  }

  // bool is_circular = 3;
  if (this->is_circular() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapping_.MergeFrom(from.mapping_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.is_circular() != 0) {
    _internal_set_is_circular(from._internal_is_circular());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mapping_.InternalSwap(&other->mapping_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Path, is_circular_)
      + sizeof(Path::is_circular_)
      - PROTOBUF_FIELD_OFFSET(Path, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Alignment::InitAsDefaultInstance() {
  ::vg::_Alignment_default_instance_._instance.get_mutable()->path_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->fragment_prev_ = const_cast< ::vg::Alignment*>(
      ::vg::Alignment::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->fragment_next_ = const_cast< ::vg::Alignment*>(
      ::vg::Alignment::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->to_correct_ = const_cast< ::vg::Position*>(
      ::vg::Position::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->annotation_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class Alignment::_Internal {
 public:
  static const ::vg::Path& path(const Alignment* msg);
  static const ::vg::Alignment& fragment_prev(const Alignment* msg);
  static const ::vg::Alignment& fragment_next(const Alignment* msg);
  static const ::vg::Position& to_correct(const Alignment* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& annotation(const Alignment* msg);
};

const ::vg::Path&
Alignment::_Internal::path(const Alignment* msg) {
  return *msg->path_;
}
const ::vg::Alignment&
Alignment::_Internal::fragment_prev(const Alignment* msg) {
  return *msg->fragment_prev_;
}
const ::vg::Alignment&
Alignment::_Internal::fragment_next(const Alignment* msg) {
  return *msg->fragment_next_;
}
const ::vg::Position&
Alignment::_Internal::to_correct(const Alignment* msg) {
  return *msg->to_correct_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Alignment::_Internal::annotation(const Alignment* msg) {
  return *msg->annotation_;
}
void Alignment::clear_annotation() {
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
Alignment::Alignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fragment_(arena),
  locus_(arena),
  refpos_(arena),
  secondary_score_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Alignment)
}
Alignment::Alignment(const Alignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fragment_(from.fragment_),
      locus_(from.locus_),
      refpos_(from.refpos_),
      secondary_score_(from.secondary_score_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence().empty()) {
    sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequence(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quality().empty()) {
    quality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_quality(),
      GetArena());
  }
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_name().empty()) {
    sample_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sample_name(),
      GetArena());
  }
  read_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_read_group().empty()) {
    read_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_read_group(),
      GetArena());
  }
  fragment_length_distribution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fragment_length_distribution().empty()) {
    fragment_length_distribution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fragment_length_distribution(),
      GetArena());
  }
  if (from._internal_has_path()) {
    path_ = new ::vg::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_fragment_prev()) {
    fragment_prev_ = new ::vg::Alignment(*from.fragment_prev_);
  } else {
    fragment_prev_ = nullptr;
  }
  if (from._internal_has_fragment_next()) {
    fragment_next_ = new ::vg::Alignment(*from.fragment_next_);
  } else {
    fragment_next_ = nullptr;
  }
  if (from._internal_has_to_correct()) {
    to_correct_ = new ::vg::Position(*from.to_correct_);
  } else {
    to_correct_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  ::memcpy(&mapping_quality_, &from.mapping_quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_used_) -
    reinterpret_cast<char*>(&mapping_quality_)) + sizeof(time_used_));
  // @@protoc_insertion_point(copy_constructor:vg.Alignment)
}

void Alignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Alignment_vg_2eproto.base);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_length_distribution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_used_) -
      reinterpret_cast<char*>(&path_)) + sizeof(time_used_));
}

Alignment::~Alignment() {
  // @@protoc_insertion_point(destructor:vg.Alignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Alignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_length_distribution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete fragment_prev_;
  if (this != internal_default_instance()) delete fragment_next_;
  if (this != internal_default_instance()) delete to_correct_;
  if (this != internal_default_instance()) delete annotation_;
}

void Alignment::ArenaDtor(void* object) {
  Alignment* _this = reinterpret_cast< Alignment* >(object);
  (void)_this;
}
void Alignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alignment& Alignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alignment_vg_2eproto.base);
  return *internal_default_instance();
}


void Alignment::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Alignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragment_.Clear();
  locus_.Clear();
  refpos_.Clear();
  secondary_score_.Clear();
  sequence_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sample_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  read_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fragment_length_distribution_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArena() == nullptr && fragment_prev_ != nullptr) {
    delete fragment_prev_;
  }
  fragment_prev_ = nullptr;
  if (GetArena() == nullptr && fragment_next_ != nullptr) {
    delete fragment_next_;
  }
  fragment_next_ = nullptr;
  if (GetArena() == nullptr && to_correct_ != nullptr) {
    delete to_correct_;
  }
  to_correct_ = nullptr;
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  ::memset(&mapping_quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_used_) -
      reinterpret_cast<char*>(&mapping_quality_)) + sizeof(time_used_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Alignment.sequence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Alignment.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_quality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mapping_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mapping_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 query_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          query_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sample_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Alignment.sample_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string read_group = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_read_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Alignment.read_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Alignment fragment_prev = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fragment_prev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Alignment fragment_next = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_fragment_next(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_secondary = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_secondary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double identity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          identity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .vg.Path fragment = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fragment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vg.Locus locus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_locus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vg.Position refpos = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_refpos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // bool read_paired = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          read_paired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool read_mapped = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          read_mapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mate_unmapped = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          mate_unmapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool read_on_reverse_strand = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          read_on_reverse_strand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mate_on_reverse_strand = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          mate_on_reverse_strand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool soft_clipped = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          soft_clipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool discordant_insert_size = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          discordant_insert_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double uniqueness = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          uniqueness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double correct = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          correct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 secondary_score = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_secondary_score(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232) {
          _internal_add_secondary_score(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fragment_score = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          fragment_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool mate_mapped_to_disjoint_subgraph = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          mate_mapped_to_disjoint_subgraph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fragment_length_distribution = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_fragment_length_distribution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Alignment.fragment_length_distribution"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time_used = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_used_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .vg.Position to_correct = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_correct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool correctly_mapped = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          correctly_mapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct annotation = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Alignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Alignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sequence");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence(), target);
  }

  // .vg.Path path = 2;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::path(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bytes quality = 4;
  if (this->quality().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_quality(), target);
  }

  // int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mapping_quality(), target);
  }

  // int32 score = 6;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_score(), target);
  }

  // int32 query_position = 7;
  if (this->query_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_query_position(), target);
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_name().data(), static_cast<int>(this->_internal_sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sample_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sample_name(), target);
  }

  // string read_group = 10;
  if (this->read_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_read_group().data(), static_cast<int>(this->_internal_read_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.read_group");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_read_group(), target);
  }

  // .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::fragment_prev(this), target, stream);
  }

  // .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::fragment_next(this), target, stream);
  }

  // bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_secondary(), target);
  }

  // double identity = 16;
  if (!(this->identity() <= 0 && this->identity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_identity(), target);
  }

  // repeated .vg.Path fragment = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fragment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_fragment(i), target, stream);
  }

  // repeated .vg.Locus locus = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_locus(i), target, stream);
  }

  // repeated .vg.Position refpos = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refpos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_refpos(i), target, stream);
  }

  // bool read_paired = 20;
  if (this->read_paired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_read_paired(), target);
  }

  // bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_read_mapped(), target);
  }

  // bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_mate_unmapped(), target);
  }

  // bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_read_on_reverse_strand(), target);
  }

  // bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_mate_on_reverse_strand(), target);
  }

  // bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_soft_clipped(), target);
  }

  // bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_discordant_insert_size(), target);
  }

  // double uniqueness = 27;
  if (!(this->uniqueness() <= 0 && this->uniqueness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_uniqueness(), target);
  }

  // double correct = 28;
  if (!(this->correct() <= 0 && this->correct() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_correct(), target);
  }

  // repeated int32 secondary_score = 29;
  {
    int byte_size = _secondary_score_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          29, _internal_secondary_score(), byte_size, target);
    }
  }

  // double fragment_score = 30;
  if (!(this->fragment_score() <= 0 && this->fragment_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_fragment_score(), target);
  }

  // bool mate_mapped_to_disjoint_subgraph = 31;
  if (this->mate_mapped_to_disjoint_subgraph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_mate_mapped_to_disjoint_subgraph(), target);
  }

  // string fragment_length_distribution = 32;
  if (this->fragment_length_distribution().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fragment_length_distribution().data(), static_cast<int>(this->_internal_fragment_length_distribution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.fragment_length_distribution");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_fragment_length_distribution(), target);
  }

  // double time_used = 35;
  if (!(this->time_used() <= 0 && this->time_used() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_time_used(), target);
  }

  // .vg.Position to_correct = 36;
  if (this->has_to_correct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::to_correct(this), target, stream);
  }

  // bool correctly_mapped = 37;
  if (this->correctly_mapped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_correctly_mapped(), target);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Alignment)
  return target;
}

size_t Alignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Alignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.Path fragment = 17;
  total_size += 2UL * this->_internal_fragment_size();
  for (const auto& msg : this->fragment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vg.Locus locus = 18;
  total_size += 2UL * this->_internal_locus_size();
  for (const auto& msg : this->locus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vg.Position refpos = 19;
  total_size += 2UL * this->_internal_refpos_size();
  for (const auto& msg : this->refpos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 secondary_score = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->secondary_score_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _secondary_score_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes quality = 4;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_quality());
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_name());
  }

  // string read_group = 10;
  if (this->read_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_read_group());
  }

  // string fragment_length_distribution = 32;
  if (this->fragment_length_distribution().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fragment_length_distribution());
  }

  // .vg.Path path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fragment_prev_);
  }

  // .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fragment_next_);
  }

  // .vg.Position to_correct = 36;
  if (this->has_to_correct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_correct_);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mapping_quality());
  }

  // int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // double identity = 16;
  if (!(this->identity() <= 0 && this->identity() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 query_position = 7;
  if (this->query_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_query_position());
  }

  // bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    total_size += 1 + 1;
  }

  // bool read_paired = 20;
  if (this->read_paired() != 0) {
    total_size += 2 + 1;
  }

  // bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    total_size += 2 + 1;
  }

  // bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    total_size += 2 + 1;
  }

  // double uniqueness = 27;
  if (!(this->uniqueness() <= 0 && this->uniqueness() >= 0)) {
    total_size += 2 + 8;
  }

  // bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    total_size += 2 + 1;
  }

  // bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    total_size += 2 + 1;
  }

  // bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    total_size += 2 + 1;
  }

  // bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    total_size += 2 + 1;
  }

  // bool mate_mapped_to_disjoint_subgraph = 31;
  if (this->mate_mapped_to_disjoint_subgraph() != 0) {
    total_size += 2 + 1;
  }

  // bool correctly_mapped = 37;
  if (this->correctly_mapped() != 0) {
    total_size += 2 + 1;
  }

  // double correct = 28;
  if (!(this->correct() <= 0 && this->correct() >= 0)) {
    total_size += 2 + 8;
  }

  // double fragment_score = 30;
  if (!(this->fragment_score() <= 0 && this->fragment_score() >= 0)) {
    total_size += 2 + 8;
  }

  // double time_used = 35;
  if (!(this->time_used() <= 0 && this->time_used() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Alignment)
  GOOGLE_DCHECK_NE(&from, this);
  const Alignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Alignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Alignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Alignment)
    MergeFrom(*source);
  }
}

void Alignment::MergeFrom(const Alignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Alignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragment_.MergeFrom(from.fragment_);
  locus_.MergeFrom(from.locus_);
  refpos_.MergeFrom(from.refpos_);
  secondary_score_.MergeFrom(from.secondary_score_);
  if (from.sequence().size() > 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.quality().size() > 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.sample_name().size() > 0) {
    _internal_set_sample_name(from._internal_sample_name());
  }
  if (from.read_group().size() > 0) {
    _internal_set_read_group(from._internal_read_group());
  }
  if (from.fragment_length_distribution().size() > 0) {
    _internal_set_fragment_length_distribution(from._internal_fragment_length_distribution());
  }
  if (from.has_path()) {
    _internal_mutable_path()->::vg::Path::MergeFrom(from._internal_path());
  }
  if (from.has_fragment_prev()) {
    _internal_mutable_fragment_prev()->::vg::Alignment::MergeFrom(from._internal_fragment_prev());
  }
  if (from.has_fragment_next()) {
    _internal_mutable_fragment_next()->::vg::Alignment::MergeFrom(from._internal_fragment_next());
  }
  if (from.has_to_correct()) {
    _internal_mutable_to_correct()->::vg::Position::MergeFrom(from._internal_to_correct());
  }
  if (from.has_annotation()) {
    _internal_mutable_annotation()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_annotation());
  }
  if (from.mapping_quality() != 0) {
    _internal_set_mapping_quality(from._internal_mapping_quality());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (!(from.identity() <= 0 && from.identity() >= 0)) {
    _internal_set_identity(from._internal_identity());
  }
  if (from.query_position() != 0) {
    _internal_set_query_position(from._internal_query_position());
  }
  if (from.is_secondary() != 0) {
    _internal_set_is_secondary(from._internal_is_secondary());
  }
  if (from.read_paired() != 0) {
    _internal_set_read_paired(from._internal_read_paired());
  }
  if (from.read_mapped() != 0) {
    _internal_set_read_mapped(from._internal_read_mapped());
  }
  if (from.mate_unmapped() != 0) {
    _internal_set_mate_unmapped(from._internal_mate_unmapped());
  }
  if (!(from.uniqueness() <= 0 && from.uniqueness() >= 0)) {
    _internal_set_uniqueness(from._internal_uniqueness());
  }
  if (from.read_on_reverse_strand() != 0) {
    _internal_set_read_on_reverse_strand(from._internal_read_on_reverse_strand());
  }
  if (from.mate_on_reverse_strand() != 0) {
    _internal_set_mate_on_reverse_strand(from._internal_mate_on_reverse_strand());
  }
  if (from.soft_clipped() != 0) {
    _internal_set_soft_clipped(from._internal_soft_clipped());
  }
  if (from.discordant_insert_size() != 0) {
    _internal_set_discordant_insert_size(from._internal_discordant_insert_size());
  }
  if (from.mate_mapped_to_disjoint_subgraph() != 0) {
    _internal_set_mate_mapped_to_disjoint_subgraph(from._internal_mate_mapped_to_disjoint_subgraph());
  }
  if (from.correctly_mapped() != 0) {
    _internal_set_correctly_mapped(from._internal_correctly_mapped());
  }
  if (!(from.correct() <= 0 && from.correct() >= 0)) {
    _internal_set_correct(from._internal_correct());
  }
  if (!(from.fragment_score() <= 0 && from.fragment_score() >= 0)) {
    _internal_set_fragment_score(from._internal_fragment_score());
  }
  if (!(from.time_used() <= 0 && from.time_used() >= 0)) {
    _internal_set_time_used(from._internal_time_used());
  }
}

void Alignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Alignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alignment::CopyFrom(const Alignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Alignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alignment::IsInitialized() const {
  return true;
}

void Alignment::InternalSwap(Alignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fragment_.InternalSwap(&other->fragment_);
  locus_.InternalSwap(&other->locus_);
  refpos_.InternalSwap(&other->refpos_);
  secondary_score_.InternalSwap(&other->secondary_score_);
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quality_.Swap(&other->quality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sample_name_.Swap(&other->sample_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  read_group_.Swap(&other->read_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fragment_length_distribution_.Swap(&other->fragment_length_distribution_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Alignment, time_used_)
      + sizeof(Alignment::time_used_)
      - PROTOBUF_FIELD_OFFSET(Alignment, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Alignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipathAlignment::InitAsDefaultInstance() {
  ::vg::_MultipathAlignment_default_instance_._instance.get_mutable()->annotation_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class MultipathAlignment::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& annotation(const MultipathAlignment* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
MultipathAlignment::_Internal::annotation(const MultipathAlignment* msg) {
  return *msg->annotation_;
}
void MultipathAlignment::clear_annotation() {
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
MultipathAlignment::MultipathAlignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subpath_(arena),
  start_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.MultipathAlignment)
}
MultipathAlignment::MultipathAlignment(const MultipathAlignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subpath_(from.subpath_),
      start_(from.start_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence().empty()) {
    sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequence(),
      GetArena());
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quality().empty()) {
    quality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_quality(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sample_name().empty()) {
    sample_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sample_name(),
      GetArena());
  }
  read_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_read_group().empty()) {
    read_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_read_group(),
      GetArena());
  }
  paired_read_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paired_read_name().empty()) {
    paired_read_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paired_read_name(),
      GetArena());
  }
  if (from._internal_has_annotation()) {
    annotation_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  mapping_quality_ = from.mapping_quality_;
  // @@protoc_insertion_point(copy_constructor:vg.MultipathAlignment)
}

void MultipathAlignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipathAlignment_vg_2eproto.base);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paired_read_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapping_quality_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(mapping_quality_));
}

MultipathAlignment::~MultipathAlignment() {
  // @@protoc_insertion_point(destructor:vg.MultipathAlignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultipathAlignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paired_read_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
}

void MultipathAlignment::ArenaDtor(void* object) {
  MultipathAlignment* _this = reinterpret_cast< MultipathAlignment* >(object);
  (void)_this;
}
void MultipathAlignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultipathAlignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipathAlignment& MultipathAlignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipathAlignment_vg_2eproto.base);
  return *internal_default_instance();
}


void MultipathAlignment::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.MultipathAlignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subpath_.Clear();
  start_.Clear();
  sequence_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sample_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  read_group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paired_read_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  mapping_quality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultipathAlignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.MultipathAlignment.sequence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_quality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.MultipathAlignment.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sample_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.MultipathAlignment.sample_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string read_group = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_read_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.MultipathAlignment.read_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vg.Subpath subpath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subpath(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 mapping_quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mapping_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 start = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_start(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_start(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string paired_read_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_paired_read_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.MultipathAlignment.paired_read_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct annotation = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipathAlignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.MultipathAlignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sequence");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence(), target);
  }

  // bytes quality = 2;
  if (this->quality().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_quality(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string sample_name = 4;
  if (this->sample_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sample_name().data(), static_cast<int>(this->_internal_sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sample_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sample_name(), target);
  }

  // string read_group = 5;
  if (this->read_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_read_group().data(), static_cast<int>(this->_internal_read_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.read_group");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_read_group(), target);
  }

  // repeated .vg.Subpath subpath = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subpath_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_subpath(i), target, stream);
  }

  // int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mapping_quality(), target);
  }

  // repeated uint32 start = 8;
  {
    int byte_size = _start_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_start(), byte_size, target);
    }
  }

  // string paired_read_name = 9;
  if (this->paired_read_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paired_read_name().data(), static_cast<int>(this->_internal_paired_read_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.paired_read_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_paired_read_name(), target);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.MultipathAlignment)
  return target;
}

size_t MultipathAlignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.MultipathAlignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.Subpath subpath = 6;
  total_size += 1UL * this->_internal_subpath_size();
  for (const auto& msg : this->subpath_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 start = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->start_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _start_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  // bytes quality = 2;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_quality());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string sample_name = 4;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sample_name());
  }

  // string read_group = 5;
  if (this->read_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_read_group());
  }

  // string paired_read_name = 9;
  if (this->paired_read_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paired_read_name());
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mapping_quality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipathAlignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.MultipathAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipathAlignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipathAlignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.MultipathAlignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.MultipathAlignment)
    MergeFrom(*source);
  }
}

void MultipathAlignment::MergeFrom(const MultipathAlignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.MultipathAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subpath_.MergeFrom(from.subpath_);
  start_.MergeFrom(from.start_);
  if (from.sequence().size() > 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.quality().size() > 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.sample_name().size() > 0) {
    _internal_set_sample_name(from._internal_sample_name());
  }
  if (from.read_group().size() > 0) {
    _internal_set_read_group(from._internal_read_group());
  }
  if (from.paired_read_name().size() > 0) {
    _internal_set_paired_read_name(from._internal_paired_read_name());
  }
  if (from.has_annotation()) {
    _internal_mutable_annotation()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_annotation());
  }
  if (from.mapping_quality() != 0) {
    _internal_set_mapping_quality(from._internal_mapping_quality());
  }
}

void MultipathAlignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.MultipathAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipathAlignment::CopyFrom(const MultipathAlignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.MultipathAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipathAlignment::IsInitialized() const {
  return true;
}

void MultipathAlignment::InternalSwap(MultipathAlignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subpath_.InternalSwap(&other->subpath_);
  start_.InternalSwap(&other->start_);
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quality_.Swap(&other->quality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sample_name_.Swap(&other->sample_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  read_group_.Swap(&other->read_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paired_read_name_.Swap(&other->paired_read_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultipathAlignment, mapping_quality_)
      + sizeof(MultipathAlignment::mapping_quality_)
      - PROTOBUF_FIELD_OFFSET(MultipathAlignment, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipathAlignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Subpath::InitAsDefaultInstance() {
  ::vg::_Subpath_default_instance_._instance.get_mutable()->path_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
}
class Subpath::_Internal {
 public:
  static const ::vg::Path& path(const Subpath* msg);
};

const ::vg::Path&
Subpath::_Internal::path(const Subpath* msg) {
  return *msg->path_;
}
Subpath::Subpath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  next_(arena),
  connection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Subpath)
}
Subpath::Subpath(const Subpath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      next_(from.next_),
      connection_(from.connection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::vg::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:vg.Subpath)
}

void Subpath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subpath_vg_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&path_)) + sizeof(score_));
}

Subpath::~Subpath() {
  // @@protoc_insertion_point(destructor:vg.Subpath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Subpath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void Subpath::ArenaDtor(void* object) {
  Subpath* _this = reinterpret_cast< Subpath* >(object);
  (void)_this;
}
void Subpath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subpath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subpath& Subpath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subpath_vg_2eproto.base);
  return *internal_default_instance();
}


void Subpath::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Subpath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_.Clear();
  connection_.Clear();
  if (GetArena() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subpath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vg.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 next = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_next(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_next(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vg.Connection connection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subpath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Subpath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Path path = 1;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // repeated uint32 next = 2;
  {
    int byte_size = _next_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_next(), byte_size, target);
    }
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
  }

  // repeated .vg.Connection connection = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_connection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Subpath)
  return target;
}

size_t Subpath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Subpath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 next = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->next_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _next_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .vg.Connection connection = 4;
  total_size += 1UL * this->_internal_connection_size();
  for (const auto& msg : this->connection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vg.Path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subpath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Subpath)
  GOOGLE_DCHECK_NE(&from, this);
  const Subpath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Subpath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Subpath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Subpath)
    MergeFrom(*source);
  }
}

void Subpath::MergeFrom(const Subpath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Subpath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_.MergeFrom(from.next_);
  connection_.MergeFrom(from.connection_);
  if (from.has_path()) {
    _internal_mutable_path()->::vg::Path::MergeFrom(from._internal_path());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void Subpath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subpath::CopyFrom(const Subpath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subpath::IsInitialized() const {
  return true;
}

void Subpath::InternalSwap(Subpath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  next_.InternalSwap(&other->next_);
  connection_.InternalSwap(&other->connection_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subpath, score_)
      + sizeof(Subpath::score_)
      - PROTOBUF_FIELD_OFFSET(Subpath, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subpath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
}
class Connection::_Internal {
 public:
};

Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&next_, &from.next_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&next_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:vg.Connection)
}

void Connection::SharedCtor() {
  ::memset(&next_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&next_)) + sizeof(score_));
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:vg.Connection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Connection::ArenaDtor(void* object) {
  Connection* _this = reinterpret_cast< Connection* >(object);
  (void)_this;
}
void Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Connection& Connection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Connection_vg_2eproto.base);
  return *internal_default_instance();
}


void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&next_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&next_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 next = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Connection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 next = 1;
  if (this->next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_next(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Connection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 next = 1;
  if (this->next() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_next());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Connection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Connection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next() != 0) {
    _internal_set_next(from._internal_next());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void Connection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, score_)
      + sizeof(Connection::score_)
      - PROTOBUF_FIELD_OFFSET(Connection, next_)>(
          reinterpret_cast<char*>(&next_),
          reinterpret_cast<char*>(&other->next_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KmerMatch::InitAsDefaultInstance() {
}
class KmerMatch::_Internal {
 public:
};

KmerMatch::KmerMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.KmerMatch)
}
KmerMatch::KmerMatch(const KmerMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence().empty()) {
    sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequence(),
      GetArena());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  // @@protoc_insertion_point(copy_constructor:vg.KmerMatch)
}

void KmerMatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KmerMatch_vg_2eproto.base);
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
}

KmerMatch::~KmerMatch() {
  // @@protoc_insertion_point(destructor:vg.KmerMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KmerMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KmerMatch::ArenaDtor(void* object) {
  KmerMatch* _this = reinterpret_cast< KmerMatch* >(object);
  (void)_this;
}
void KmerMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KmerMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KmerMatch& KmerMatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KmerMatch_vg_2eproto.base);
  return *internal_default_instance();
}


void KmerMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.KmerMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KmerMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.KmerMatch.sequence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool backward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          backward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KmerMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.KmerMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence().data(), static_cast<int>(this->_internal_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.KmerMatch.sequence");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence(), target);
  }

  // int64 node_id = 2;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_node_id(), target);
  }

  // sint32 position = 3;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_position(), target);
  }

  // bool backward = 4;
  if (this->backward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_backward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.KmerMatch)
  return target;
}

size_t KmerMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.KmerMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence());
  }

  // int64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  // sint32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_position());
  }

  // bool backward = 4;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KmerMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.KmerMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const KmerMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KmerMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.KmerMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.KmerMatch)
    MergeFrom(*source);
  }
}

void KmerMatch::MergeFrom(const KmerMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.KmerMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.backward() != 0) {
    _internal_set_backward(from._internal_backward());
  }
}

void KmerMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.KmerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KmerMatch::CopyFrom(const KmerMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.KmerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KmerMatch::IsInitialized() const {
  return true;
}

void KmerMatch::InternalSwap(KmerMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KmerMatch, backward_)
      + sizeof(KmerMatch::backward_)
      - PROTOBUF_FIELD_OFFSET(KmerMatch, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KmerMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasePileup::InitAsDefaultInstance() {
}
class BasePileup::_Internal {
 public:
};

BasePileup::BasePileup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.BasePileup)
}
BasePileup::BasePileup(const BasePileup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bases_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bases().empty()) {
    bases_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bases(),
      GetArena());
  }
  qualities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_qualities().empty()) {
    qualities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_qualities(),
      GetArena());
  }
  ::memcpy(&ref_base_, &from.ref_base_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_bases_) -
    reinterpret_cast<char*>(&ref_base_)) + sizeof(num_bases_));
  // @@protoc_insertion_point(copy_constructor:vg.BasePileup)
}

void BasePileup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasePileup_vg_2eproto.base);
  bases_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qualities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bases_) -
      reinterpret_cast<char*>(&ref_base_)) + sizeof(num_bases_));
}

BasePileup::~BasePileup() {
  // @@protoc_insertion_point(destructor:vg.BasePileup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BasePileup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bases_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qualities_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasePileup::ArenaDtor(void* object) {
  BasePileup* _this = reinterpret_cast< BasePileup* >(object);
  (void)_this;
}
void BasePileup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasePileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasePileup& BasePileup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasePileup_vg_2eproto.base);
  return *internal_default_instance();
}


void BasePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.BasePileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bases_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  qualities_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ref_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bases_) -
      reinterpret_cast<char*>(&ref_base_)) + sizeof(num_bases_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasePileup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ref_base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ref_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_bases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_bases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bases();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.BasePileup.bases"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes qualities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_qualities();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasePileup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.BasePileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ref_base = 1;
  if (this->ref_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ref_base(), target);
  }

  // int32 num_bases = 2;
  if (this->num_bases() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_bases(), target);
  }

  // string bases = 3;
  if (this->bases().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bases().data(), static_cast<int>(this->_internal_bases().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.BasePileup.bases");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bases(), target);
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_qualities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.BasePileup)
  return target;
}

size_t BasePileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.BasePileup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bases = 3;
  if (this->bases().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bases());
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_qualities());
  }

  // int32 ref_base = 1;
  if (this->ref_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ref_base());
  }

  // int32 num_bases = 2;
  if (this->num_bases() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_bases());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasePileup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.BasePileup)
  GOOGLE_DCHECK_NE(&from, this);
  const BasePileup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasePileup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.BasePileup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.BasePileup)
    MergeFrom(*source);
  }
}

void BasePileup::MergeFrom(const BasePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.BasePileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bases().size() > 0) {
    _internal_set_bases(from._internal_bases());
  }
  if (from.qualities().size() > 0) {
    _internal_set_qualities(from._internal_qualities());
  }
  if (from.ref_base() != 0) {
    _internal_set_ref_base(from._internal_ref_base());
  }
  if (from.num_bases() != 0) {
    _internal_set_num_bases(from._internal_num_bases());
  }
}

void BasePileup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.BasePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasePileup::CopyFrom(const BasePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.BasePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePileup::IsInitialized() const {
  return true;
}

void BasePileup::InternalSwap(BasePileup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bases_.Swap(&other->bases_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  qualities_.Swap(&other->qualities_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasePileup, num_bases_)
      + sizeof(BasePileup::num_bases_)
      - PROTOBUF_FIELD_OFFSET(BasePileup, ref_base_)>(
          reinterpret_cast<char*>(&ref_base_),
          reinterpret_cast<char*>(&other->ref_base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasePileup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodePileup::InitAsDefaultInstance() {
}
class NodePileup::_Internal {
 public:
};

NodePileup::NodePileup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  base_pileup_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.NodePileup)
}
NodePileup::NodePileup(const NodePileup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      base_pileup_(from.base_pileup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:vg.NodePileup)
}

void NodePileup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodePileup_vg_2eproto.base);
  node_id_ = PROTOBUF_LONGLONG(0);
}

NodePileup::~NodePileup() {
  // @@protoc_insertion_point(destructor:vg.NodePileup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodePileup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodePileup::ArenaDtor(void* object) {
  NodePileup* _this = reinterpret_cast< NodePileup* >(object);
  (void)_this;
}
void NodePileup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodePileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodePileup& NodePileup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodePileup_vg_2eproto.base);
  return *internal_default_instance();
}


void NodePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.NodePileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_pileup_.Clear();
  node_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodePileup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vg.BasePileup base_pileup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_pileup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodePileup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.NodePileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // repeated .vg.BasePileup base_pileup = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_pileup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_base_pileup(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.NodePileup)
  return target;
}

size_t NodePileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.NodePileup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.BasePileup base_pileup = 2;
  total_size += 1UL * this->_internal_base_pileup_size();
  for (const auto& msg : this->base_pileup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodePileup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.NodePileup)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePileup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodePileup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.NodePileup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.NodePileup)
    MergeFrom(*source);
  }
}

void NodePileup::MergeFrom(const NodePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.NodePileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_pileup_.MergeFrom(from.base_pileup_);
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void NodePileup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.NodePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePileup::CopyFrom(const NodePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.NodePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePileup::IsInitialized() const {
  return true;
}

void NodePileup::InternalSwap(NodePileup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  base_pileup_.InternalSwap(&other->base_pileup_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodePileup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EdgePileup::InitAsDefaultInstance() {
  ::vg::_EdgePileup_default_instance_._instance.get_mutable()->edge_ = const_cast< ::vg::Edge*>(
      ::vg::Edge::internal_default_instance());
}
class EdgePileup::_Internal {
 public:
  static const ::vg::Edge& edge(const EdgePileup* msg);
};

const ::vg::Edge&
EdgePileup::_Internal::edge(const EdgePileup* msg) {
  return *msg->edge_;
}
EdgePileup::EdgePileup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.EdgePileup)
}
EdgePileup::EdgePileup(const EdgePileup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  qualities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_qualities().empty()) {
    qualities_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_qualities(),
      GetArena());
  }
  if (from._internal_has_edge()) {
    edge_ = new ::vg::Edge(*from.edge_);
  } else {
    edge_ = nullptr;
  }
  ::memcpy(&num_reads_, &from.num_reads_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_forward_reads_) -
    reinterpret_cast<char*>(&num_reads_)) + sizeof(num_forward_reads_));
  // @@protoc_insertion_point(copy_constructor:vg.EdgePileup)
}

void EdgePileup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgePileup_vg_2eproto.base);
  qualities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&edge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_forward_reads_) -
      reinterpret_cast<char*>(&edge_)) + sizeof(num_forward_reads_));
}

EdgePileup::~EdgePileup() {
  // @@protoc_insertion_point(destructor:vg.EdgePileup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgePileup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  qualities_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete edge_;
}

void EdgePileup::ArenaDtor(void* object) {
  EdgePileup* _this = reinterpret_cast< EdgePileup* >(object);
  (void)_this;
}
void EdgePileup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgePileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgePileup& EdgePileup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgePileup_vg_2eproto.base);
  return *internal_default_instance();
}


void EdgePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.EdgePileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualities_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && edge_ != nullptr) {
    delete edge_;
  }
  edge_ = nullptr;
  ::memset(&num_reads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_forward_reads_) -
      reinterpret_cast<char*>(&num_reads_)) + sizeof(num_forward_reads_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgePileup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vg.Edge edge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_forward_reads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_forward_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes qualities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_qualities();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgePileup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.EdgePileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Edge edge = 1;
  if (this->has_edge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::edge(this), target, stream);
  }

  // int32 num_reads = 2;
  if (this->num_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_reads(), target);
  }

  // int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_forward_reads(), target);
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_qualities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.EdgePileup)
  return target;
}

size_t EdgePileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.EdgePileup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_qualities());
  }

  // .vg.Edge edge = 1;
  if (this->has_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_);
  }

  // int32 num_reads = 2;
  if (this->num_reads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_reads());
  }

  // int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_forward_reads());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgePileup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.EdgePileup)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgePileup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgePileup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.EdgePileup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.EdgePileup)
    MergeFrom(*source);
  }
}

void EdgePileup::MergeFrom(const EdgePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.EdgePileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qualities().size() > 0) {
    _internal_set_qualities(from._internal_qualities());
  }
  if (from.has_edge()) {
    _internal_mutable_edge()->::vg::Edge::MergeFrom(from._internal_edge());
  }
  if (from.num_reads() != 0) {
    _internal_set_num_reads(from._internal_num_reads());
  }
  if (from.num_forward_reads() != 0) {
    _internal_set_num_forward_reads(from._internal_num_forward_reads());
  }
}

void EdgePileup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.EdgePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgePileup::CopyFrom(const EdgePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.EdgePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePileup::IsInitialized() const {
  return true;
}

void EdgePileup::InternalSwap(EdgePileup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  qualities_.Swap(&other->qualities_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgePileup, num_forward_reads_)
      + sizeof(EdgePileup::num_forward_reads_)
      - PROTOBUF_FIELD_OFFSET(EdgePileup, edge_)>(
          reinterpret_cast<char*>(&edge_),
          reinterpret_cast<char*>(&other->edge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgePileup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pileup::InitAsDefaultInstance() {
}
class Pileup::_Internal {
 public:
};

Pileup::Pileup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_pileups_(arena),
  edge_pileups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Pileup)
}
Pileup::Pileup(const Pileup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_pileups_(from.node_pileups_),
      edge_pileups_(from.edge_pileups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vg.Pileup)
}

void Pileup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pileup_vg_2eproto.base);
}

Pileup::~Pileup() {
  // @@protoc_insertion_point(destructor:vg.Pileup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pileup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pileup::ArenaDtor(void* object) {
  Pileup* _this = reinterpret_cast< Pileup* >(object);
  (void)_this;
}
void Pileup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pileup& Pileup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pileup_vg_2eproto.base);
  return *internal_default_instance();
}


void Pileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Pileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_pileups_.Clear();
  edge_pileups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pileup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vg.NodePileup node_pileups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_pileups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vg.EdgePileup edge_pileups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_pileups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pileup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Pileup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.NodePileup node_pileups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_pileups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_pileups(i), target, stream);
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_pileups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edge_pileups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Pileup)
  return target;
}

size_t Pileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Pileup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.NodePileup node_pileups = 1;
  total_size += 1UL * this->_internal_node_pileups_size();
  for (const auto& msg : this->node_pileups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  total_size += 1UL * this->_internal_edge_pileups_size();
  for (const auto& msg : this->edge_pileups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pileup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Pileup)
  GOOGLE_DCHECK_NE(&from, this);
  const Pileup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pileup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Pileup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Pileup)
    MergeFrom(*source);
  }
}

void Pileup::MergeFrom(const Pileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Pileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_pileups_.MergeFrom(from.node_pileups_);
  edge_pileups_.MergeFrom(from.edge_pileups_);
}

void Pileup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Pileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pileup::CopyFrom(const Pileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Pileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pileup::IsInitialized() const {
  return true;
}

void Pileup::InternalSwap(Pileup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_pileups_.InternalSwap(&other->node_pileups_);
  edge_pileups_.InternalSwap(&other->edge_pileups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pileup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Snarl::InitAsDefaultInstance() {
  ::vg::_Snarl_default_instance_._instance.get_mutable()->start_ = const_cast< ::vg::Visit*>(
      ::vg::Visit::internal_default_instance());
  ::vg::_Snarl_default_instance_._instance.get_mutable()->end_ = const_cast< ::vg::Visit*>(
      ::vg::Visit::internal_default_instance());
  ::vg::_Snarl_default_instance_._instance.get_mutable()->parent_ = const_cast< ::vg::Snarl*>(
      ::vg::Snarl::internal_default_instance());
}
class Snarl::_Internal {
 public:
  static const ::vg::Visit& start(const Snarl* msg);
  static const ::vg::Visit& end(const Snarl* msg);
  static const ::vg::Snarl& parent(const Snarl* msg);
};

const ::vg::Visit&
Snarl::_Internal::start(const Snarl* msg) {
  return *msg->start_;
}
const ::vg::Visit&
Snarl::_Internal::end(const Snarl* msg) {
  return *msg->end_;
}
const ::vg::Snarl&
Snarl::_Internal::parent(const Snarl* msg) {
  return *msg->parent_;
}
Snarl::Snarl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Snarl)
}
Snarl::Snarl(const Snarl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_start()) {
    start_ = new ::vg::Visit(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::vg::Visit(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_parent()) {
    parent_ = new ::vg::Snarl(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&directed_acyclic_net_graph_) -
    reinterpret_cast<char*>(&type_)) + sizeof(directed_acyclic_net_graph_));
  // @@protoc_insertion_point(copy_constructor:vg.Snarl)
}

void Snarl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Snarl_vg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&directed_acyclic_net_graph_) -
      reinterpret_cast<char*>(&start_)) + sizeof(directed_acyclic_net_graph_));
}

Snarl::~Snarl() {
  // @@protoc_insertion_point(destructor:vg.Snarl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Snarl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete parent_;
}

void Snarl::ArenaDtor(void* object) {
  Snarl* _this = reinterpret_cast< Snarl* >(object);
  (void)_this;
}
void Snarl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snarl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Snarl& Snarl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Snarl_vg_2eproto.base);
  return *internal_default_instance();
}


void Snarl::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Snarl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArena() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&directed_acyclic_net_graph_) -
      reinterpret_cast<char*>(&type_)) + sizeof(directed_acyclic_net_graph_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snarl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vg.SnarlType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vg::SnarlType>(val));
        } else goto handle_unusual;
        continue;
      // .vg.Visit start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Visit end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Snarl parent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Snarl.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool start_self_reachable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          start_self_reachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool end_self_reachable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          end_self_reachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool start_end_reachable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          start_end_reachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool directed_acyclic_net_graph = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          directed_acyclic_net_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Snarl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Snarl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.SnarlType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .vg.Visit start = 2;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .vg.Visit end = 3;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // .vg.Snarl parent = 4;
  if (this->has_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::parent(this), target, stream);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Snarl.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // bool start_self_reachable = 6;
  if (this->start_self_reachable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_start_self_reachable(), target);
  }

  // bool end_self_reachable = 7;
  if (this->end_self_reachable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_end_self_reachable(), target);
  }

  // bool start_end_reachable = 8;
  if (this->start_end_reachable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_start_end_reachable(), target);
  }

  // bool directed_acyclic_net_graph = 9;
  if (this->directed_acyclic_net_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_directed_acyclic_net_graph(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Snarl)
  return target;
}

size_t Snarl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Snarl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vg.Visit start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .vg.Visit end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .vg.Snarl parent = 4;
  if (this->has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // .vg.SnarlType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool start_self_reachable = 6;
  if (this->start_self_reachable() != 0) {
    total_size += 1 + 1;
  }

  // bool end_self_reachable = 7;
  if (this->end_self_reachable() != 0) {
    total_size += 1 + 1;
  }

  // bool start_end_reachable = 8;
  if (this->start_end_reachable() != 0) {
    total_size += 1 + 1;
  }

  // bool directed_acyclic_net_graph = 9;
  if (this->directed_acyclic_net_graph() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snarl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Snarl)
  GOOGLE_DCHECK_NE(&from, this);
  const Snarl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Snarl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Snarl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Snarl)
    MergeFrom(*source);
  }
}

void Snarl::MergeFrom(const Snarl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Snarl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_start()) {
    _internal_mutable_start()->::vg::Visit::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->::vg::Visit::MergeFrom(from._internal_end());
  }
  if (from.has_parent()) {
    _internal_mutable_parent()->::vg::Snarl::MergeFrom(from._internal_parent());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.start_self_reachable() != 0) {
    _internal_set_start_self_reachable(from._internal_start_self_reachable());
  }
  if (from.end_self_reachable() != 0) {
    _internal_set_end_self_reachable(from._internal_end_self_reachable());
  }
  if (from.start_end_reachable() != 0) {
    _internal_set_start_end_reachable(from._internal_start_end_reachable());
  }
  if (from.directed_acyclic_net_graph() != 0) {
    _internal_set_directed_acyclic_net_graph(from._internal_directed_acyclic_net_graph());
  }
}

void Snarl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Snarl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snarl::CopyFrom(const Snarl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Snarl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snarl::IsInitialized() const {
  return true;
}

void Snarl::InternalSwap(Snarl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snarl, directed_acyclic_net_graph_)
      + sizeof(Snarl::directed_acyclic_net_graph_)
      - PROTOBUF_FIELD_OFFSET(Snarl, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snarl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Visit::InitAsDefaultInstance() {
  ::vg::_Visit_default_instance_._instance.get_mutable()->snarl_ = const_cast< ::vg::Snarl*>(
      ::vg::Snarl::internal_default_instance());
}
class Visit::_Internal {
 public:
  static const ::vg::Snarl& snarl(const Visit* msg);
};

const ::vg::Snarl&
Visit::_Internal::snarl(const Visit* msg) {
  return *msg->snarl_;
}
Visit::Visit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Visit)
}
Visit::Visit(const Visit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_snarl()) {
    snarl_ = new ::vg::Snarl(*from.snarl_);
  } else {
    snarl_ = nullptr;
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  // @@protoc_insertion_point(copy_constructor:vg.Visit)
}

void Visit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Snarl_vg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&snarl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&snarl_)) + sizeof(backward_));
}

Visit::~Visit() {
  // @@protoc_insertion_point(destructor:vg.Visit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Visit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete snarl_;
}

void Visit::ArenaDtor(void* object) {
  Visit* _this = reinterpret_cast< Visit* >(object);
  (void)_this;
}
void Visit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Visit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Visit& Visit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Snarl_vg_2eproto.base);
  return *internal_default_instance();
}


void Visit::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Visit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && snarl_ != nullptr) {
    delete snarl_;
  }
  snarl_ = nullptr;
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Visit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Snarl snarl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snarl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool backward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          backward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Visit.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Visit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Visit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_node_id(), target);
  }

  // .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::snarl(this), target, stream);
  }

  // bool backward = 3;
  if (this->backward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_backward(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Visit.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Visit)
  return target;
}

size_t Visit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Visit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snarl_);
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_node_id());
  }

  // bool backward = 3;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Visit)
  GOOGLE_DCHECK_NE(&from, this);
  const Visit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Visit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Visit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Visit)
    MergeFrom(*source);
  }
}

void Visit::MergeFrom(const Visit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Visit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_snarl()) {
    _internal_mutable_snarl()->::vg::Snarl::MergeFrom(from._internal_snarl());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.backward() != 0) {
    _internal_set_backward(from._internal_backward());
  }
}

void Visit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Visit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visit::CopyFrom(const Visit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Visit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visit::IsInitialized() const {
  return true;
}

void Visit::InternalSwap(Visit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Visit, backward_)
      + sizeof(Visit::backward_)
      - PROTOBUF_FIELD_OFFSET(Visit, snarl_)>(
          reinterpret_cast<char*>(&snarl_),
          reinterpret_cast<char*>(&other->snarl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Visit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnarlTraversal::InitAsDefaultInstance() {
}
class SnarlTraversal::_Internal {
 public:
};

SnarlTraversal::SnarlTraversal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  visit_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.SnarlTraversal)
}
SnarlTraversal::SnarlTraversal(const SnarlTraversal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      visit_(from.visit_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vg.SnarlTraversal)
}

void SnarlTraversal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnarlTraversal_vg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SnarlTraversal::~SnarlTraversal() {
  // @@protoc_insertion_point(destructor:vg.SnarlTraversal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SnarlTraversal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnarlTraversal::ArenaDtor(void* object) {
  SnarlTraversal* _this = reinterpret_cast< SnarlTraversal* >(object);
  (void)_this;
}
void SnarlTraversal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnarlTraversal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnarlTraversal& SnarlTraversal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnarlTraversal_vg_2eproto.base);
  return *internal_default_instance();
}


void SnarlTraversal::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.SnarlTraversal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visit_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnarlTraversal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vg.Visit visit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_visit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.SnarlTraversal.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnarlTraversal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.SnarlTraversal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.Visit visit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_visit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_visit(i), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.SnarlTraversal.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.SnarlTraversal)
  return target;
}

size_t SnarlTraversal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.SnarlTraversal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.Visit visit = 1;
  total_size += 1UL * this->_internal_visit_size();
  for (const auto& msg : this->visit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnarlTraversal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.SnarlTraversal)
  GOOGLE_DCHECK_NE(&from, this);
  const SnarlTraversal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnarlTraversal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.SnarlTraversal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.SnarlTraversal)
    MergeFrom(*source);
  }
}

void SnarlTraversal::MergeFrom(const SnarlTraversal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.SnarlTraversal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visit_.MergeFrom(from.visit_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void SnarlTraversal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.SnarlTraversal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnarlTraversal::CopyFrom(const SnarlTraversal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.SnarlTraversal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnarlTraversal::IsInitialized() const {
  return true;
}

void SnarlTraversal::InternalSwap(SnarlTraversal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  visit_.InternalSwap(&other->visit_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SnarlTraversal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Locus::InitAsDefaultInstance() {
  ::vg::_Locus_default_instance_._instance.get_mutable()->overall_support_ = const_cast< ::vg::Support*>(
      ::vg::Support::internal_default_instance());
}
class Locus::_Internal {
 public:
  static const ::vg::Support& overall_support(const Locus* msg);
};

const ::vg::Support&
Locus::_Internal::overall_support(const Locus* msg) {
  return *msg->overall_support_;
}
Locus::Locus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allele_(arena),
  support_(arena),
  genotype_(arena),
  allele_log_likelihood_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Locus)
}
Locus::Locus(const Locus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allele_(from.allele_),
      support_(from.support_),
      genotype_(from.genotype_),
      allele_log_likelihood_(from.allele_log_likelihood_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_overall_support()) {
    overall_support_ = new ::vg::Support(*from.overall_support_);
  } else {
    overall_support_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vg.Locus)
}

void Locus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Locus_vg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overall_support_ = nullptr;
}

Locus::~Locus() {
  // @@protoc_insertion_point(destructor:vg.Locus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Locus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete overall_support_;
}

void Locus::ArenaDtor(void* object) {
  Locus* _this = reinterpret_cast< Locus* >(object);
  (void)_this;
}
void Locus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Locus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Locus& Locus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Locus_vg_2eproto.base);
  return *internal_default_instance();
}


void Locus::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Locus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allele_.Clear();
  support_.Clear();
  genotype_.Clear();
  allele_log_likelihood_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && overall_support_ != nullptr) {
    delete overall_support_;
  }
  overall_support_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Locus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vg.Locus.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vg.Path allele = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allele(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vg.Support support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_support(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vg.Genotype genotype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genotype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .vg.Support overall_support = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overall_support(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double allele_log_likelihood = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_allele_log_likelihood(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_allele_log_likelihood(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Locus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Locus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vg.Locus.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .vg.Path allele = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allele_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_allele(i), target, stream);
  }

  // repeated .vg.Support support = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_support_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_support(i), target, stream);
  }

  // repeated .vg.Genotype genotype = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genotype_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_genotype(i), target, stream);
  }

  // .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::overall_support(this), target, stream);
  }

  // repeated double allele_log_likelihood = 6;
  if (this->_internal_allele_log_likelihood_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_allele_log_likelihood(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Locus)
  return target;
}

size_t Locus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Locus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vg.Path allele = 2;
  total_size += 1UL * this->_internal_allele_size();
  for (const auto& msg : this->allele_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vg.Support support = 3;
  total_size += 1UL * this->_internal_support_size();
  for (const auto& msg : this->support_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vg.Genotype genotype = 4;
  total_size += 1UL * this->_internal_genotype_size();
  for (const auto& msg : this->genotype_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double allele_log_likelihood = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_allele_log_likelihood_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _allele_log_likelihood_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overall_support_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Locus)
  GOOGLE_DCHECK_NE(&from, this);
  const Locus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Locus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Locus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Locus)
    MergeFrom(*source);
  }
}

void Locus::MergeFrom(const Locus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Locus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allele_.MergeFrom(from.allele_);
  support_.MergeFrom(from.support_);
  genotype_.MergeFrom(from.genotype_);
  allele_log_likelihood_.MergeFrom(from.allele_log_likelihood_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_overall_support()) {
    _internal_mutable_overall_support()->::vg::Support::MergeFrom(from._internal_overall_support());
  }
}

void Locus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Locus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locus::CopyFrom(const Locus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Locus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locus::IsInitialized() const {
  return true;
}

void Locus::InternalSwap(Locus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  allele_.InternalSwap(&other->allele_);
  support_.InternalSwap(&other->support_);
  genotype_.InternalSwap(&other->genotype_);
  allele_log_likelihood_.InternalSwap(&other->allele_log_likelihood_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(overall_support_, other->overall_support_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Locus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Genotype::InitAsDefaultInstance() {
}
class Genotype::_Internal {
 public:
};

Genotype::Genotype(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allele_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Genotype)
}
Genotype::Genotype(const Genotype& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allele_(from.allele_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&likelihood_, &from.likelihood_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_phased_) -
    reinterpret_cast<char*>(&likelihood_)) + sizeof(is_phased_));
  // @@protoc_insertion_point(copy_constructor:vg.Genotype)
}

void Genotype::SharedCtor() {
  ::memset(&likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_phased_) -
      reinterpret_cast<char*>(&likelihood_)) + sizeof(is_phased_));
}

Genotype::~Genotype() {
  // @@protoc_insertion_point(destructor:vg.Genotype)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Genotype::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Genotype::ArenaDtor(void* object) {
  Genotype* _this = reinterpret_cast< Genotype* >(object);
  (void)_this;
}
void Genotype::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Genotype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Genotype& Genotype::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Genotype_vg_2eproto.base);
  return *internal_default_instance();
}


void Genotype::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Genotype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allele_.Clear();
  ::memset(&likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_phased_) -
      reinterpret_cast<char*>(&likelihood_)) + sizeof(is_phased_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Genotype::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 allele = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_allele(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_allele(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_phased = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_phased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double likelihood = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          likelihood_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double log_likelihood = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          log_likelihood_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double log_prior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          log_prior_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double log_posterior = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          log_posterior_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Genotype::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Genotype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 allele = 1;
  {
    int byte_size = _allele_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_allele(), byte_size, target);
    }
  }

  // bool is_phased = 2;
  if (this->is_phased() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_phased(), target);
  }

  // double likelihood = 3;
  if (!(this->likelihood() <= 0 && this->likelihood() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_likelihood(), target);
  }

  // double log_likelihood = 4;
  if (!(this->log_likelihood() <= 0 && this->log_likelihood() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_log_likelihood(), target);
  }

  // double log_prior = 5;
  if (!(this->log_prior() <= 0 && this->log_prior() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_log_prior(), target);
  }

  // double log_posterior = 6;
  if (!(this->log_posterior() <= 0 && this->log_posterior() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_log_posterior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Genotype)
  return target;
}

size_t Genotype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Genotype)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 allele = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->allele_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _allele_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double likelihood = 3;
  if (!(this->likelihood() <= 0 && this->likelihood() >= 0)) {
    total_size += 1 + 8;
  }

  // double log_likelihood = 4;
  if (!(this->log_likelihood() <= 0 && this->log_likelihood() >= 0)) {
    total_size += 1 + 8;
  }

  // double log_prior = 5;
  if (!(this->log_prior() <= 0 && this->log_prior() >= 0)) {
    total_size += 1 + 8;
  }

  // double log_posterior = 6;
  if (!(this->log_posterior() <= 0 && this->log_posterior() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_phased = 2;
  if (this->is_phased() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Genotype::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Genotype)
  GOOGLE_DCHECK_NE(&from, this);
  const Genotype* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Genotype>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Genotype)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Genotype)
    MergeFrom(*source);
  }
}

void Genotype::MergeFrom(const Genotype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Genotype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allele_.MergeFrom(from.allele_);
  if (!(from.likelihood() <= 0 && from.likelihood() >= 0)) {
    _internal_set_likelihood(from._internal_likelihood());
  }
  if (!(from.log_likelihood() <= 0 && from.log_likelihood() >= 0)) {
    _internal_set_log_likelihood(from._internal_log_likelihood());
  }
  if (!(from.log_prior() <= 0 && from.log_prior() >= 0)) {
    _internal_set_log_prior(from._internal_log_prior());
  }
  if (!(from.log_posterior() <= 0 && from.log_posterior() >= 0)) {
    _internal_set_log_posterior(from._internal_log_posterior());
  }
  if (from.is_phased() != 0) {
    _internal_set_is_phased(from._internal_is_phased());
  }
}

void Genotype::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Genotype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genotype::CopyFrom(const Genotype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Genotype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genotype::IsInitialized() const {
  return true;
}

void Genotype::InternalSwap(Genotype* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  allele_.InternalSwap(&other->allele_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Genotype, is_phased_)
      + sizeof(Genotype::is_phased_)
      - PROTOBUF_FIELD_OFFSET(Genotype, likelihood_)>(
          reinterpret_cast<char*>(&likelihood_),
          reinterpret_cast<char*>(&other->likelihood_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Genotype::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Support::InitAsDefaultInstance() {
}
class Support::_Internal {
 public:
};

Support::Support(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Support)
}
Support::Support(const Support& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:vg.Support)
}

void Support::SharedCtor() {
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(right_));
}

Support::~Support() {
  // @@protoc_insertion_point(destructor:vg.Support)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Support::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Support::ArenaDtor(void* object) {
  Support* _this = reinterpret_cast< Support* >(object);
  (void)_this;
}
void Support::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Support::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Support& Support::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Support_vg_2eproto.base);
  return *internal_default_instance();
}


void Support::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Support)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Support::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double reverse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Support::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Support)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double quality = 1;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_quality(), target);
  }

  // double forward = 2;
  if (!(this->forward() <= 0 && this->forward() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_forward(), target);
  }

  // double reverse = 3;
  if (!(this->reverse() <= 0 && this->reverse() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reverse(), target);
  }

  // double left = 4;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_left(), target);
  }

  // double right = 5;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Support)
  return target;
}

size_t Support::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Support)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double quality = 1;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    total_size += 1 + 8;
  }

  // double forward = 2;
  if (!(this->forward() <= 0 && this->forward() >= 0)) {
    total_size += 1 + 8;
  }

  // double reverse = 3;
  if (!(this->reverse() <= 0 && this->reverse() >= 0)) {
    total_size += 1 + 8;
  }

  // double left = 4;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    total_size += 1 + 8;
  }

  // double right = 5;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Support::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Support)
  GOOGLE_DCHECK_NE(&from, this);
  const Support* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Support>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Support)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Support)
    MergeFrom(*source);
  }
}

void Support::MergeFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Support)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.quality() <= 0 && from.quality() >= 0)) {
    _internal_set_quality(from._internal_quality());
  }
  if (!(from.forward() <= 0 && from.forward() >= 0)) {
    _internal_set_forward(from._internal_forward());
  }
  if (!(from.reverse() <= 0 && from.reverse() >= 0)) {
    _internal_set_reverse(from._internal_reverse());
  }
  if (!(from.left() <= 0 && from.left() >= 0)) {
    _internal_set_left(from._internal_left());
  }
  if (!(from.right() <= 0 && from.right() >= 0)) {
    _internal_set_right(from._internal_right());
  }
}

void Support::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Support::CopyFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Support::IsInitialized() const {
  return true;
}

void Support::InternalSwap(Support* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Support, right_)
      + sizeof(Support::right_)
      - PROTOBUF_FIELD_OFFSET(Support, quality_)>(
          reinterpret_cast<char*>(&quality_),
          reinterpret_cast<char*>(&other->quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Support::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationSupport::InitAsDefaultInstance() {
  ::vg::_LocationSupport_default_instance_._instance.get_mutable()->support_ = const_cast< ::vg::Support*>(
      ::vg::Support::internal_default_instance());
  ::vg::_LocationSupport_default_instance_.edge_ = const_cast< ::vg::Edge*>(
      ::vg::Edge::internal_default_instance());
  ::vg::_LocationSupport_default_instance_.node_id_ = PROTOBUF_LONGLONG(0);
}
class LocationSupport::_Internal {
 public:
  static const ::vg::Support& support(const LocationSupport* msg);
  static const ::vg::Edge& edge(const LocationSupport* msg);
};

const ::vg::Support&
LocationSupport::_Internal::support(const LocationSupport* msg) {
  return *msg->support_;
}
const ::vg::Edge&
LocationSupport::_Internal::edge(const LocationSupport* msg) {
  return *msg->oneof_location_.edge_;
}
void LocationSupport::set_allocated_edge(::vg::Edge* edge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_oneof_location();
  if (edge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edge);
    if (message_arena != submessage_arena) {
      edge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge, submessage_arena);
    }
    set_has_edge();
    oneof_location_.edge_ = edge;
  }
  // @@protoc_insertion_point(field_set_allocated:vg.LocationSupport.edge)
}
LocationSupport::LocationSupport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.LocationSupport)
}
LocationSupport::LocationSupport(const LocationSupport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_support()) {
    support_ = new ::vg::Support(*from.support_);
  } else {
    support_ = nullptr;
  }
  clear_has_oneof_location();
  switch (from.oneof_location_case()) {
    case kEdge: {
      _internal_mutable_edge()->::vg::Edge::MergeFrom(from._internal_edge());
      break;
    }
    case kNodeId: {
      _internal_set_node_id(from._internal_node_id());
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vg.LocationSupport)
}

void LocationSupport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationSupport_vg_2eproto.base);
  support_ = nullptr;
  clear_has_oneof_location();
}

LocationSupport::~LocationSupport() {
  // @@protoc_insertion_point(destructor:vg.LocationSupport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationSupport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete support_;
  if (has_oneof_location()) {
    clear_oneof_location();
  }
}

void LocationSupport::ArenaDtor(void* object) {
  LocationSupport* _this = reinterpret_cast< LocationSupport* >(object);
  (void)_this;
}
void LocationSupport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationSupport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationSupport& LocationSupport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationSupport_vg_2eproto.base);
  return *internal_default_instance();
}


void LocationSupport::clear_oneof_location() {
// @@protoc_insertion_point(one_of_clear_start:vg.LocationSupport)
  switch (oneof_location_case()) {
    case kEdge: {
      if (GetArena() == nullptr) {
        delete oneof_location_.edge_;
      }
      break;
    }
    case kNodeId: {
      // No need to clear
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_LOCATION_NOT_SET;
}


void LocationSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.LocationSupport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && support_ != nullptr) {
    delete support_;
  }
  support_ = nullptr;
  clear_oneof_location();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationSupport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vg.Support support = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_support(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Edge edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationSupport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.LocationSupport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Support support = 1;
  if (this->has_support()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::support(this), target, stream);
  }

  // .vg.Edge edge = 2;
  if (_internal_has_edge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edge(this), target, stream);
  }

  // int64 node_id = 3;
  if (_internal_has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.LocationSupport)
  return target;
}

size_t LocationSupport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.LocationSupport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vg.Support support = 1;
  if (this->has_support()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *support_);
  }

  switch (oneof_location_case()) {
    // .vg.Edge edge = 2;
    case kEdge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_location_.edge_);
      break;
    }
    // int64 node_id = 3;
    case kNodeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_node_id());
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationSupport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.LocationSupport)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationSupport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationSupport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.LocationSupport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.LocationSupport)
    MergeFrom(*source);
  }
}

void LocationSupport::MergeFrom(const LocationSupport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.LocationSupport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_support()) {
    _internal_mutable_support()->::vg::Support::MergeFrom(from._internal_support());
  }
  switch (from.oneof_location_case()) {
    case kEdge: {
      _internal_mutable_edge()->::vg::Edge::MergeFrom(from._internal_edge());
      break;
    }
    case kNodeId: {
      _internal_set_node_id(from._internal_node_id());
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
}

void LocationSupport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.LocationSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationSupport::CopyFrom(const LocationSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.LocationSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationSupport::IsInitialized() const {
  return true;
}

void LocationSupport::InternalSwap(LocationSupport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(support_, other->support_);
  swap(oneof_location_, other->oneof_location_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationSupport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Translation::InitAsDefaultInstance() {
  ::vg::_Translation_default_instance_._instance.get_mutable()->from_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
  ::vg::_Translation_default_instance_._instance.get_mutable()->to_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
}
class Translation::_Internal {
 public:
  static const ::vg::Path& from(const Translation* msg);
  static const ::vg::Path& to(const Translation* msg);
};

const ::vg::Path&
Translation::_Internal::from(const Translation* msg) {
  return *msg->from_;
}
const ::vg::Path&
Translation::_Internal::to(const Translation* msg) {
  return *msg->to_;
}
Translation::Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vg.Translation)
}
Translation::Translation(const Translation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::vg::Path(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::vg::Path(*from.to_);
  } else {
    to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vg.Translation)
}

void Translation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Translation_vg_2eproto.base);
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:vg.Translation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Translation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void Translation::ArenaDtor(void* object) {
  Translation* _this = reinterpret_cast< Translation* >(object);
  (void)_this;
}
void Translation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Translation& Translation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Translation_vg_2eproto.base);
  return *internal_default_instance();
}


void Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Translation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArena() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Translation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vg.Path from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vg.Path to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Translation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vg.Translation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Path from = 1;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from(this), target, stream);
  }

  // .vg.Path to = 2;
  if (this->has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Translation)
  return target;
}

size_t Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Translation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vg.Path from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .vg.Path to = 2;
  if (this->has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Translation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  const Translation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Translation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Translation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Translation)
    MergeFrom(*source);
  }
}

void Translation::MergeFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    _internal_mutable_from()->::vg::Path::MergeFrom(from._internal_from());
  }
  if (from.has_to()) {
    _internal_mutable_to()->::vg::Path::MergeFrom(from._internal_to());
  }
}

void Translation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Translation::CopyFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {
  return true;
}

void Translation::InternalSwap(Translation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Translation, to_)
      + sizeof(Translation::to_)
      - PROTOBUF_FIELD_OFFSET(Translation, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Translation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vg::Graph* Arena::CreateMaybeMessage< ::vg::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Node* Arena::CreateMaybeMessage< ::vg::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Edge* Arena::CreateMaybeMessage< ::vg::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Edit* Arena::CreateMaybeMessage< ::vg::Edit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Edit >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Mapping* Arena::CreateMaybeMessage< ::vg::Mapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Mapping >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Position* Arena::CreateMaybeMessage< ::vg::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Path* Arena::CreateMaybeMessage< ::vg::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Alignment* Arena::CreateMaybeMessage< ::vg::Alignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Alignment >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::MultipathAlignment* Arena::CreateMaybeMessage< ::vg::MultipathAlignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::MultipathAlignment >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Subpath* Arena::CreateMaybeMessage< ::vg::Subpath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Subpath >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Connection* Arena::CreateMaybeMessage< ::vg::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::KmerMatch* Arena::CreateMaybeMessage< ::vg::KmerMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::KmerMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::BasePileup* Arena::CreateMaybeMessage< ::vg::BasePileup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::BasePileup >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::NodePileup* Arena::CreateMaybeMessage< ::vg::NodePileup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::NodePileup >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::EdgePileup* Arena::CreateMaybeMessage< ::vg::EdgePileup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::EdgePileup >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Pileup* Arena::CreateMaybeMessage< ::vg::Pileup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Pileup >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Snarl* Arena::CreateMaybeMessage< ::vg::Snarl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Snarl >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Visit* Arena::CreateMaybeMessage< ::vg::Visit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Visit >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::SnarlTraversal* Arena::CreateMaybeMessage< ::vg::SnarlTraversal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::SnarlTraversal >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Locus* Arena::CreateMaybeMessage< ::vg::Locus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Locus >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Genotype* Arena::CreateMaybeMessage< ::vg::Genotype >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Genotype >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Support* Arena::CreateMaybeMessage< ::vg::Support >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Support >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::LocationSupport* Arena::CreateMaybeMessage< ::vg::LocationSupport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::LocationSupport >(arena);
}
template<> PROTOBUF_NOINLINE ::vg::Translation* Arena::CreateMaybeMessage< ::vg::Translation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vg::Translation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
